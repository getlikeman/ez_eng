import threading
from datetime import datetime
from json import load

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ContentTypes
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from aiohttp import web

import functions as f
import scheduled as sc
from config import PAYMENTS_PROVIDER_TOKEN
from create_bot import dp, bot
from db import Database
from server import app

test = load(open("test.json", "r", encoding="utf-8"))
test_test = load(open("test_test.json", "r", encoding="utf-8"))
db = Database()
cb = CallbackData("kn", "question", "answer")
parse_to_index = {"A": 0, "B": 1, "C": 2, "D": 3}


@dp.message_handler(commands='start')
async def hello(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not db.user_exists(user_id):
        db.first_add(user_id)

        await bot.send_message(message.chat.id,
                               '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Easy English</b> –æ—Ç <b>National Foundation Center!</b>\n'
                               '–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ü–µ–ª–µ–π.\n'
                               '–ù–∞—à–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –æ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö, –∞ —Ç–µ—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è.\n'
                               '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.\n'
                               '–¢–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤–º–µ—Å—Ç–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º.\n'
                               '–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∏ –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–∞—à–∏—Ö —É—Ä–æ–∫–∞—Ö! üöÄüåü\n')

        await bot.send_message(message.chat.id, '–ü—Ä–æ—à—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.\n'
                                                '<b>(–õ—é–±–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –¥–∞–ª–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∞—à–µ–≥–æ –§–ò–û –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏—à—å –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–∞–º. –ï–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å.)</b>')
        await state.set_state('wait_for_name')
    else:
        await bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ –±–∞–∑–µ.")


@dp.message_handler(state='wait_for_name')
async def process_name(message: types.Message, state: FSMContext):
    fio = message.text
    db.set_fio(message.from_user.id, fio)
    await state.finish()
    await state.update_data(username=fio)
    await bot.send_message(message.chat.id, f"–¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º, {fio}!\n"
                                            "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /test\n"
                                            "<b>–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞</b>")


def compose_markup(number: int):
    question = "test_" + str(number)
    kn = InlineKeyboardMarkup(row_width=1)

    cdA = {
        "question": number,
        "answer": "A"
    }
    kn.insert(InlineKeyboardButton(test_test[question]["A"], callback_data=cb.new(number, "A")))
    cdB = {
        "question": number,
        "answer": "B"
    }
    kn.insert(InlineKeyboardButton(test_test[question]["B"], callback_data=cb.new(number, "B")))
    cdC = {
        "question": number,
        "answer": "C"
    }
    kn.insert(InlineKeyboardButton(test_test[question]["C"], callback_data=cb.new(number, "C")))
    return kn


@dp.callback_query_handler(cb.filter())
@dp.throttled(rate=2)
async def answer_handler(callback: CallbackQuery, callback_data: dict):
    user_id = callback.from_user.id
    data = callback_data
    q = "test_" + str(data["question"])
    is_correct = test_test[q]["Correct"] == data["answer"]
    passed_value = db.get_passed(user_id)
    msg = db.get_msg(user_id)[0]
    if is_correct:
        passed = passed_value[0] + 1
        db.upd_passed(user_id, passed)
    if q == "test_25":
        score = db.get_passed(user_id)[0]
        if score <= 8:
            db.upd_level(user_id, "Beginner")
        elif score <= 12:
            db.upd_level(user_id, "Elementary")
        elif score <= 16:
            db.upd_level(user_id, "Pre-Intermediate")
        elif score <= 21:
            db.upd_level(user_id, "Intermediate")
        else:
            db.upd_level(user_id, "Upper-Intermediate")

        await bot.delete_message(callback.from_user.id, msg)
        db.upd_msg(user_id, 0)
        db.upd_passed(user_id, 0)
        db.upd_process(user_id, False)
        intro = {"Beginner": "https://youtu.be/_ffiSFzHLw4",
                 "Elementary": "https://youtu.be/CT6a4jKfuzs",
                 "Pre-Intermediate": "https://youtu.be/oTqX1r3SFHI",
                 "Intermediate": "https://youtu.be/aQbXt2f4Pag",
                 "Upper-Intermediate": "https://youtu.be/HYyx3_X7zrE"}
        await bot.send_message(callback.from_user.id,
                               f"–ö–æ–Ω–µ—Ü. –õ–æ–≤–∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫ –ø–æ —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é: {intro[db.get_level(user_id)[0]]}\n"
                               f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: <b>{db.get_level(user_id)[0]}</b> \n"
                               f"–í—ã –Ω–∞–±—Ä–∞–ª–∏ <b>{score}</b> –±–∞–ª–ª–æ–≤ –∏–∑ 25")
        await f.invoice(callback.from_user.id, '–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü ',
                        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ–±–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ. –û—Ñ–æ—Ä–º–∏–≤ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: \n"
                        f"–î–æ—Å—Ç—É–ø –±–æ–ª–µ–µ —á–µ–º 150 –≤–∏–¥–µ–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É. \n"
                        f"–¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä—å—è–ª–∞. \n"
                        f"–ò –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –¥—Ä—É–≥–æ–≤–æ.", 'sub')
        return
    q = "test_" + str(int(data["question"]) + 1)
    await bot.edit_message_text(chat_id=callback.from_user.id,
                                text=test_test[q]["question_1"],
                                message_id=msg,
                                reply_markup=compose_markup(int(data["question"]) + 1))


@dp.message_handler(commands='testSTOP')
async def check_level(message: types.Message):
    user_id = message.from_user.id
    if db.get_level(user_id)[0]:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ —Å–¥–∞–≤–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω ")
        return
    if db.get_process(user_id)[0]:
        await bot.send_message(message.from_user.id, "–¢–µ—Å—Ç —É–∂–µ –∏–¥—ë—Ç")
        return
    db.upd_process(user_id, True)
    db.upd_passed(user_id, 0)
    msg = await bot.send_message(
        message.from_user.id,
        test_test["test_1"]["question_1"],
        reply_markup=compose_markup(1)
    )
    db.upd_msg(user_id, msg.message_id)


@dp.message_handler(commands='test')
async def check_level(message: types.Message):
    user_id = message.from_user.id
    if db.get_level(user_id)[0]:
        await bot.send_message(user_id, "–í—ã —É–∂–µ —Å–¥–∞–≤–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω ")
        return
    if db.get_process(user_id)[0]:
        await bot.send_message(user_id, "–¢–µ—Å—Ç —É–∂–µ –∏–¥—ë—Ç")
        return
    db.upd_process(user_id, True)
    db.upd_passed(user_id, 0)
    await f.compose_poll(user_id)


@dp.poll_answer_handler()
async def poll_answer(poll_answer: types.PollAnswer):
    user_id = poll_answer.user.id
    db.upd_question(user_id, db.get_question(user_id)[0] + 1)
    if db.get_options(user_id)[0] == poll_answer.option_ids[0]:
        passed = db.get_passed(user_id)[0] + 1
        db.upd_passed(user_id, passed)
    await bot.delete_message(user_id, db.get_msg(user_id)[0])
    await f.compose_poll(user_id)


@dp.message_handler(commands=['profile'])
async def id_from_message(message: types.message_id):
    await f.get_profile(message)


@dp.message_handler(commands=['feedBack'])
async def id_from_message(message: types.message_id):
    await f.send_feedback(message)


@dp.message_handler(commands=['subscription'])
async def id_from_message(message: types.message_id):
    if db.check_sub(message.from_user.id):
        await bot.send_message(message.from_user.id,
                               f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. ')
    else:
        payload = 'sub' if db.check_sub(message.from_user.id)[0] is None else 'resub'
        await f.invoice(message.from_user.id, '–ø–æ–¥–ø–∏—Å–∫–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ', payload)


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    match message.successful_payment.invoice_payload:
        case 'sub':
            await bot.send_message(message.chat.id,
                                   '–ü–æ–∑–¥—Ä–∞–≤–ª—è—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π.–ö–æ—Ä–æ—á–µ —Ä–∞—Å–∫–∞–¥ —Ç–∞–∫–æ–π.–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 15.00 —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –≤–º–µ—Å—Ç–µ —Å —Ä–∞–∑–¥–∞—Ç–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä—å—è–ª–æ–º.–ü—Ä–æ—Ö–æ–¥—è —Ç–µ—Å—Ç —Ç—ã –ø—Ä–æ–¥–≤–∏–≥–∞–µ—à—Å—è –¥–∞–ª—å—à–µ')
        case 'resub':
            await bot.send_message(message.chat.id, '–ø–æ–∑–¥—Ä–∞–≤–ª—è—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π')
    db.give_subscription(message.chat.id, 1)
    name = db.get_fio(message.chat.id)[0]
    db.insert_payments([message.chat.id, name])


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="–í–æ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ")


def server():
    web.run_app(app, port=8060)
    return app


if __name__ == '__main__':
    threading.Thread(target=server).start()
    executor.start_polling(dp, skip_updates=True, on_startup=sc.on_startup)
